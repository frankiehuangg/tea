import os
import re
import collections

from lib.repo_functions import repo_dir, repo_file
from lib.tea_object import TeaTag
from lib.tea_object_function import object_find, object_write, ref_resolve

# ref: refs/remotes/origin/main

def ref_list(repo, path=None):
    if (not path):
        path = repo_dir(repo, 'refs')

    ret = collections.OrderedDict()
    # Tea shows refs sorted. To do the same, we use
    # an OrderedDict and sort the output of listdir

    for f in sorted(os.listdir(path)):
        can = os.path.join(path, f)
        if (os.path.isdir(can)):
            ret[f] = ref_list(repo, can)
        else:
            ret[f] = ref_resolve(repo, can)

    return ret


def tag_create(repo, name, ref, create_tag_object=False):
    # get the TeaObject from the object reference
    sha = object_find(repo, ref)

    if (create_tag_object):
        # create tag object (commit)
        tag = TeaTag(repo)
        tag.kvlm = collections.OrderedDict()
        tag.kvlm[b'object'] = sha.encode()
        tag.kvlm[b'type'] = b'commit'
        tag.kvlm[b'tag'] = name.encode()

        tag.kvlm[b'tagger'] = b'tea <tea@example.com>'
        tag.kvlm[None] = b'A default tag generated by tea'

        tag_sha = object_write(tag)

        # create ref
        ref_create(repo, 'tags/' + name, tag_sha)
    else:
        # create lightweight tag
        ref_create(repo, 'tags/' + name, sha)

def ref_create(repo, ref_name, sha):
    with open(repo_file(repo, 'refs/' + ref_name), 'w') as fp:
        fp.write(sha + '\n')
